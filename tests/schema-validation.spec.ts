import { test, expect } from '@playwright/test';

/**
 * Testy E2E dla weryfikacji JSON-LD schema.org
 * SprawdzajÄ… poprawnoÅ›Ä‡ generowania strukturalnych danych dla rÃ³Å¼nych scenariuszy routingu
 */

// Helper function do pobierania i parsowania JSON-LD
async function getJsonLdSchema(page: any, schemaType: string = 'Service') {
  const scriptContent = await page.locator('script[type="application/ld+json"]').textContent();
  expect(scriptContent).toBeTruthy();
  
  const schema = JSON.parse(scriptContent);
  
  // SprawdÅº czy to pojedynczy obiekt czy tablica
  if (Array.isArray(schema)) {
    const serviceSchema = schema.find(s => s['@type'] === schemaType);
    expect(serviceSchema).toBeTruthy();
    return serviceSchema;
  } else {
    expect(schema['@type']).toBe(schemaType);
    return schema;
  }
}

test.describe('JSON-LD Schema Validation', () => {
  
  /**
   * SCENARIUSZ A: Strona kategoria+miasto z lokalnym opisem
   * Path: /balustrady/zlotow
   * Oczekiwane: localDesc z siteConfig.services[].localDesc['zlotow']
   */
  test('Scenariusz A: Balustrady ZÅ‚otÃ³w - lokalny opis z siteConfig', async ({ page }) => {
    await page.goto('/balustrady/zlotow');
    
    // Pobierz i sparsuj JSON-LD
    const schema = await getJsonLdSchema(page, 'Service');
    
    // Weryfikacja @type
    expect(schema['@type']).toBe('Service');
    
    // Weryfikacja name - powinno zawieraÄ‡ "Balustrady ZÅ‚otÃ³w"
    expect(schema.name).toContain('Balustrady');
    expect(schema.name).toContain('ZÅ‚otÃ³w');
    
    // Weryfikacja description - powinno pochodziÄ‡ z localDesc['zlotow']
    expect(schema.description).toBeTruthy();
    expect(schema.description.length).toBeGreaterThan(100); // Lokalny opis jest dÅ‚ugi
    expect(schema.description).toContain('ZÅ‚otÃ³w'); // Zawiera nazwÄ™ miasta
    expect(schema.description).toContain('SEB-STAL-SPAW'); // Zawiera nazwÄ™ firmy
    
    // Weryfikacja areaServed
    expect(schema.areaServed).toBe('ZÅ‚otÃ³w');
    
    // Weryfikacja provider (LocalBusiness)
    expect(schema.provider).toBeTruthy();
    expect(schema.provider['@type']).toBe('LocalBusiness');
    expect(schema.provider.name).toBe('SEB-STAL-SPAW');
    expect(schema.provider.telephone).toBe('+48 786 618 536');
    
    // Weryfikacja serviceType
    expect(schema.serviceType).toBeTruthy();
    
    console.log('âœ… Scenariusz A: Schema dla Balustrady ZÅ‚otÃ³w jest poprawna');
  });

  /**
   * SCENARIUSZ B: Strona kategoria+miasto bez wpisu w localDesc
   * Path: /meble-loft/ledyczek
   * Oczekiwane: fallback description (rozbudowany opis)
   */
  test('Scenariusz B: Meble Loft LÄ™dyczek - fallback description', async ({ page }) => {
    await page.goto('/meble-loft/ledyczek');
    
    // Pobierz i sparsuj JSON-LD
    const schema = await getJsonLdSchema(page, 'Service');
    
    // Weryfikacja @type
    expect(schema['@type']).toBe('Service');
    
    // Weryfikacja name
    expect(schema.name).toContain('Meble loft');
    expect(schema.name).toContain('LÄ™dyczek');
    
    // Weryfikacja description - powinno byÄ‡ fallback (nie localDesc)
    expect(schema.description).toBeTruthy();
    expect(schema.description).toContain('LÄ™dyczek'); // Zawiera nazwÄ™ miasta
    expect(schema.description).toContain('SEB-STAL-SPAW'); // Zawiera nazwÄ™ firmy
    expect(schema.description).toContain('bezpÅ‚atnym pomiarem'); // Zawiera USP
    expect(schema.description).toContain('3-letniÄ… gwarancjÄ…'); // Zawiera gwarancjÄ™
    
    // Weryfikacja areaServed
    expect(schema.areaServed).toBe('LÄ™dyczek');
    
    // Weryfikacja provider
    expect(schema.provider).toBeTruthy();
    expect(schema.provider['@type']).toBe('LocalBusiness');
    expect(schema.provider.name).toBe('SEB-STAL-SPAW');
    
    console.log('âœ… Scenariusz B: Schema dla Meble Loft LÄ™dyczek (fallback) jest poprawna');
  });

  /**
   * SCENARIUSZ C: Strona gÅ‚Ã³wnej kategorii bez miasta
   * Path: /konstrukcje-stalowe
   * Oczekiwane: fallback "Stara WiÅ›niewka"
   */
  test('Scenariusz C: Konstrukcje stalowe - kategoria gÅ‚Ã³wna bez miasta', async ({ page }) => {
    await page.goto('/konstrukcje-stalowe');
    
    // Pobierz i sparsuj JSON-LD
    const schema = await getJsonLdSchema(page, 'Service');
    
    // Weryfikacja @type
    expect(schema['@type']).toBe('Service');
    
    // Weryfikacja name - powinno zawieraÄ‡ "Konstrukcje stalowe Stara WiÅ›niewka"
    expect(schema.name).toContain('Konstrukcje stalowe');
    expect(schema.name).toContain('Stara WiÅ›niewka');
    
    // Weryfikacja description - fallback dla kategorii gÅ‚Ã³wnej
    expect(schema.description).toBeTruthy();
    expect(schema.description).toContain('Stara WiÅ›niewka'); // Zawiera miasto gÅ‚Ã³wne
    expect(schema.description).toContain('SEB-STAL-SPAW'); // Zawiera nazwÄ™ firmy
    expect(schema.description).toContain('3-letniÄ… gwarancjÄ…'); // Zawiera gwarancjÄ™
    
    // Weryfikacja areaServed - powinno byÄ‡ "Stara WiÅ›niewka"
    expect(schema.areaServed).toBe('Stara WiÅ›niewka');
    
    // Weryfikacja provider
    expect(schema.provider).toBeTruthy();
    expect(schema.provider['@type']).toBe('LocalBusiness');
    expect(schema.provider.name).toBe('SEB-STAL-SPAW');
    
    console.log('âœ… Scenariusz C: Schema dla Konstrukcje stalowe (kategoria gÅ‚Ã³wna) jest poprawna');
  });

  /**
   * DODATKOWY TEST: Weryfikacja HomePage FAQPage schema
   */
  test('Dodatkowy: HomePage - FAQPage schema', async ({ page }) => {
    await page.goto('/');
    
    // Pobierz i sparsuj JSON-LD (moÅ¼e byÄ‡ tablica z FAQ)
    const scriptContent = await page.locator('script[type="application/ld+json"]').textContent();
    expect(scriptContent).toBeTruthy();
    
    const schemas = JSON.parse(scriptContent);
    
    // SprawdÅº czy to tablica
    expect(Array.isArray(schemas)).toBeTruthy();
    
    // ZnajdÅº FAQPage schema
    const faqSchema = schemas.find(s => s['@type'] === 'FAQPage');
    expect(faqSchema).toBeTruthy();
    
    // Weryfikacja FAQPage
    expect(faqSchema['@type']).toBe('FAQPage');
    expect(faqSchema.mainEntity).toBeTruthy();
    expect(Array.isArray(faqSchema.mainEntity)).toBeTruthy();
    expect(faqSchema.mainEntity.length).toBeGreaterThan(0);
    
    // SprawdÅº pierwszÄ… FAQ
    const firstFaq = faqSchema.mainEntity[0];
    expect(firstFaq['@type']).toBe('Question');
    expect(firstFaq.name).toBeTruthy();
    expect(firstFaq.acceptedAnswer).toBeTruthy();
    expect(firstFaq.acceptedAnswer['@type']).toBe('Answer');
    expect(firstFaq.acceptedAnswer.text).toBeTruthy();
    
    console.log('âœ… Dodatkowy: HomePage FAQPage schema jest poprawna');
  });

  /**
   * DODATKOWY TEST: Weryfikacja Contact Page schema
   */
  test('Dodatkowy: Contact Page - ContactPage schema', async ({ page }) => {
    await page.goto('/kontakt');
    
    // Pobierz i sparsuj JSON-LD
    const schema = await getJsonLdSchema(page, 'ContactPage');
    
    // Weryfikacja ContactPage
    expect(schema['@type']).toBe('ContactPage');
    expect(schema.mainEntity).toBeTruthy();
    expect(schema.mainEntity['@type']).toBe('LocalBusiness');
    expect(schema.mainEntity.name).toBe('SEB-STAL-SPAW');
    expect(schema.mainEntity.telephone).toBe('+48 786 618 536');
    expect(schema.mainEntity.address).toBeTruthy();
    expect(schema.mainEntity.address.addressLocality).toBe('Stara WiÅ›niewka');
    
    console.log('âœ… Dodatkowy: Contact Page schema jest poprawna');
  });
});

/**
 * Test Suite Summary:
 * 
 * ðŸŽ¯ SCENARIUSZ A: /balustrady/zlotow
 *    - Weryfikuje lokalny opis z siteConfig.services[].localDesc['zlotow']
 *    - Sprawdza name: "Balustrady ZÅ‚otÃ³w"
 *    - Sprawdza areaServed: "ZÅ‚otÃ³w"
 * 
 * ðŸŽ¯ SCENARIUSZ B: /meble-loft/ledyczek  
 *    - Weryfikuje fallback description (brak localDesc)
 *    - Sprawdza name: "Meble loft LÄ™dyczek"
 *    - Sprawdza areaServed: "LÄ™dyczek"
 * 
 * ðŸŽ¯ SCENARIUSZ C: /konstrukcje-stalowe
 *    - Weryfikuje fallback dla kategorii gÅ‚Ã³wnej
 *    - Sprawdza name: "Konstrukcje stalowe Stara WiÅ›niewka"
 *    - Sprawdza areaServed: "Stara WiÅ›niewka"
 * 
 * ðŸŽ¯ DODATKOWE: HomePage, Contact
 *    - Weryfikuje FAQPage i ContactPage schemas
 */